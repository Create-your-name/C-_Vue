
<template>

    <el-button type="primary" @click="exportExcel()">导出</el-button>
    <el-button type="primary" class="el-icon-s-operation" click @click="ziduanpeizhi">字段配置</el-button>
     <!--: id   =>  v-bind :id  同  script 中的""后的Tid属性对应赋值-->
    <el-table ref="filterTable"
              :id="Tid"  
              :data="table"
              size="small"
              row-class-name="row"
              cell-class-name="column"
              :highlight-current-row="true"
              :header-cell-style="{background:'#9ACD32',height:'250',color:'#000000',border: '1px solid tan','text-align':'center',}"
              :row-style="{background:'#AFEEEE',height:5+'px'}"
              :cell-style="{'text-align':'center'}"
              @cell-click="clickRow"
              @row-click="test"
              @row-dblclick="rowdblclick"
              @selection-change="SelectChange"
              v-horizontal-scroll="'always'">
      <!--  <el-table-column label="ABNORM CARD" fixed="left" min-width="150px" align="center">
            <template #default="scope">
                <el-link :href=" 'http://6n-oa-eip.rxgz.crmicro.com/jump.aspx?tid=' +scope.row.tid + '&pid='+scope.row.pid +'&acc=MjE0MzAwMDY=&viewtype=1'" target="_blank" class="buttonText" type="primary" :underline="false">ABNORM CARD</el-link>
            </template>
        </el-table-column>

        <el-table-column label="过程" fixed="left" min-width="100px" align="center">
            <template #default="scope">
                <el-link :href=" 'http://6n-oa-eip.rxgz.crmicro.com/jump.aspx?tid=' +scope.row.tid + '&pid='+scope.row.pid +'&acc=MjE0MzAwMDY=&viewtype=2'" target="_blank" class="buttonText" type="primary" :underline="false">过程</el-link>
            </template>
        </el-table-column>-->
        <template v-for=" item in tableLabel">
            <el-table-column v-if="item.show"
                             :key="item.prop"
                             style="{text-align:center,margin: auto}"
                             :show-overflow-tooltip="true"
                             sortable
                             :prop="item.prop"
                             :width="item.width"
                             :label="item.label" />
            <el-table-column v-if="item.url1"
                             :label="item.label"
                             :key="item.prop"
                             :width="item.width">
                <template #default="scope">
                    <el-link :href=" 'http://6n-oa-eip.rxgz.crmicro.com/jump.aspx?tid=' +scope.row.tid + '&pid='+scope.row.pid +'&acc=amlhbmdtZWl5dWFu&viewtype=1'" target="_blank" class="buttonText" type="primary" :underline="false">ABNORM CARD</el-link>
                </template>
            </el-table-column>
            <el-table-column v-if="item.url2"
                             :label="item.label"
                             :key="item.prop"
                             :width="item.width">
                <template #default="scope">
                    <el-link :href=" 'http://6n-oa-eip.rxgz.crmicro.com/jump.aspx?tid=' +scope.row.tid + '&pid='+scope.row.pid +'&acc=amlhbmdtZWl5dWFu&viewtype=2'" target="_blank" class="buttonText" type="primary" :underline="false">过程</el-link>
                </template>
            </el-table-column>
        </template>
    </el-table>

    <!--    ref="dialog__wrapper" v-dialogDrag :title="$t('message.TableColumn')"
    -->
    <el-dialog v-model="dialogFormVisible" :close-on-click-modal="false" :close-on-press-escape="false">
        <el-row :gutter="20">
            <el-col v-for=" item in A"
                    :key="item.prop"
                    :span="6"
                    style="height:35px">
                <el-checkbox v-if="!item.url1&!item.url2" v-model="item.show">{{ item.label }}</el-checkbox>
              <!--   <el-checkbox-group v-model="item.shows" @change="handleCheckedList">
                     <div>
                         <el-checkbox style="width:40%;" v-model="item.shows">{{item.label}}</el-checkbox>
                     </div>
                 </el-checkbox-group>-->

            </el-col>
        </el-row>
            <el-button type="danger" @click="saveTableColumns">保存字段配置</el-button>
    </el-dialog>



</template>

<style>
    /*     style 加上 scoped  指的是 给本页面中的所有控件 加上一个范围 scoped 中  会给本页面中每个组件生成一个统一的ID 来区分 
                                                                                  如果 传递了子组件进来 则给子组件一样赋值这个统一ID
                                                                                  (前提是子组件根组件唯一)


                                                                                                              console.log(row.pid);
                                                                                                              console.log(row.tid);

                                            ：deep(组件){}     深度选择器
                                            ：global(组件)     全局选择器

                                            ：class="$style.类名"  可以指定他 的style 使用
     */

</style>
<script>

    import FileSaver from "file-saver"
    import * as XLSX from "xlsx";
    export default {
     props: ['table', 'tableLabel', 'Tid'],

    data() {

        var validateEventEnd = (rule, value, callback) => {
            if (value < this.form.activityBeginTime) {
                callback(new Error("结束时间需晚于开始时间!"));
            } else {
                callback();
            }
        };
        var validateEventEnd2 = (rule, value, callback) => {
            if (value < this.form.activityBeginTime2) {
                callback(new Error("结束时间需晚于开始时间!"));
            } else {
                callback();
            }
        };

                 return {

                    dialogFormVisible: false,

                    A:[],

                    rules: {
                        activityEndTime: [{
                            validator: validateEventEnd,
                            trigger: "change"
                        }],
                        activityEndTime2: [{
                            validator: validateEventEnd2,
                            trigger: "change"
                        }],
                    }
                }
            },
             methods: {
                   test(row) {
                         console.log('被点击了');
                         console.log(row.pid);
                         console.log(this.A);
                 },
                 ziduanpeizhi() {
                     this.A = JSON.parse(JSON.stringify(this.tableLabel));

                     this.dialogFormVisible = true;
                 },
                 saveTableColumns() {
                     this.$emit("updateNum", this.A)
                     this.dialogFormVisible = false;
                 },
                 handleCheckedList() {

                 },
                    exportExcel() {
                        //转换成excel时，使用原始的格式
                        var xlsxParam = { raw: true };
                        let fix = document.querySelector(".el-table__fixed");
                        let wb;
                        //判断有无fixed定位，如果有的话去掉，后面再加上，不然数据会重复
                        if (fix) {
                            wb = XLSX.utils.table_to_book(
                                document.getElementById(this.Tid).removeChild(fix), xlsxParam
                            );
                            document.getElementById(this.Tid).appendChild(fix);
                        } else {
                            wb = XLSX.utils.table_to_book(document.getElementById(this.Tid), xlsxParam);
                        }
                         console.log(this.Tid);
                        var wbout = XLSX.write(wb, {
                            bookType: "xlsx",
                            bookSST: true,
                            type: "array",
                        });
                        try {
                            FileSaver.saveAs(
                                new Blob([wbout], { type: "application/octet-stream" }),
                                "导出详情单.xlsx"
                            ); //文件名
                        } catch (e) {
                            if (typeof console !== "undefined") console.log(e, wbout);
                        }
                        return wbout;
                    },
            // 单击选中某一行选框
            clickRow(row) {
                this.$refs.filterTable.toggleRowSelection(row)
                this.$emit('clickRow', row)
            },
            // 双击选中某一行
            rowdblclick(row) {
                this.$emit('rowdblclick', row)
            },
            // 选中一行或者多行数据
            SelectChange(val) {
                this.$emit('SelectChange', val)
            },
            // 翻页序号连续
            indexMethod(index) {
                return (index + 1)
            }
        }
    }

</script>

